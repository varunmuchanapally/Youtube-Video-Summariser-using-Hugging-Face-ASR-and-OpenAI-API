# -*- coding: utf-8 -*-
"""YouTube Video Summarization

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pDaeTTGOJCxl1FrOAES1S7cEq9IsnNww

Youtube Video Summariser
"""

! pip install pytube -q

from pytube import YouTube
import subprocess

URL  = 'https://www.youtube.com/watch?v=wD2cVhC-63I'

"""Create a YouTube object and get the audio stream"""

yt = YouTube(URL)
audio_stream = yt.streams.filter(only_audio=True, file_extension='mp4').first()

"""Download the audio stream as an MP4 file"""

audio_stream.download(filename='audio.mp4')

"""Use FFmpeg to convert the downloaded MP4 audio to WAV"""

! ffmpeg -i ytaudio.mp4 -acodec pcm_s16le -ar 16000 ytaudio.wav

! ffmpeg -version

!pip install huggingsound -q

"""Importing modules for the converting audio to text"""

from huggingsound import SpeechRecognitionModel
import torch

device = "cuda" if torch.cuda.is_available() else "cpu"

model = SpeechRecognitionModel("jonatasgrosman/wav2vec2-large-xlsr-53-english", device = device)

"""Audio Chunking - Breaking down audio into chunks for speech to text conversion for the limited GPU"""

import librosa

input_file = '/content/ytaudio.wav'

print(librosa.get_samplerate(input_file))

# Stream over 30 seconds chunks rather than load the full file
stream = librosa.stream(
    input_file,
    block_length=30,
    frame_length=16000,
    hop_length=16000
)

import soundfile as sf

for i,speech in enumerate(stream):
  sf.write(f'{i}.wav', speech, 16000)

"""Audio to Text"""

audio_path =[]
for a in range(i+1):
  audio_path.append(f'/content/{a}.wav')

audio_path

transcriptions = model.transcribe(audio_path)

full_transcript = ' '
for item in transcriptions:
  full_transcript += ''.join(item['transcription'])
print(full_transcript)

"""OPEN AI API Summary"""

!pip install openai

import openai
import json

API_KEY = 'API_KEY'

openai.api_key = API_KEY

ask = "This is Youtube Transcript generated from Hugging Face ASR and Now this text need to be summarised. Please give a brief summary"

response = openai.ChatCompletion.create(
    model = "gpt-3.5-turbo",
    messages = [
        {"role":"user", "content":ask+full_transcript}
    ]
)

content = response['choices'][0]['message']['content']
print(content)